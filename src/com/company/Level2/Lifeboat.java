package com.company.Level2;
//구명보트 191017목요일

//---------------문제 설명---------------

//무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다.
// 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.
//
//예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고
// 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만
// 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.
//
//구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.
//
//사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때,
// 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.
//
//---------------제한사항---------------

import java.util.Arrays;

//무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.
//각 사람의 몸무게는 40kg 이상 240kg 이하입니다.
//구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.
//구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.
public class Lifeboat {

    //오름차순으로 정렬한다. 그 이후, 가장 가벼운 사람(젤 왼쪽)과 가장 무거운 사람(젤 오른쪽)을 같은 보트에 태울 수 있는지 확인한다.
    //가능하다면 둘이 태우고, 아니면 가장 오른쪽(무거운) 사람을 혼자 태운다.
    //왜 이 방법이 효율적인가? 가장 가벼운 사람의 입장에서 생각해보자.
    //이 사람을 가능한 효율적으로 태우려면, 함께 탑승할 수 있는 사람 중에서 가장 무거운 사람과 함께 탑승해야한다.
    //그런데, 가장 무거운 사람이 가장 가벼운 사람과 함께 탈 수 없다면,
    //가장 무거운 사람은 어떤 사람과도 같이 탑승할 수 없으므로 혼자 탈 수 밖에 없다.


    public int solution(int[] people, int limit) {
        int cnt=0;
        Arrays.sort(people);
        int j=0;
        for (int i=people.length-1;i>j;i--){
            if (people[i]+people[j]<=limit){
                cnt++;
                j++;
            }
        }
        System.out.println( people.length-cnt);
        return people.length-cnt;
    }

}
